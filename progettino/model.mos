(!
Routing cost spanning tree: dato un grafo non orientato e pesato,
trovare l’albero di copertura che minimizza la somma del costo dei cammini tra ogni coppia di nodi.
Per 3 persone: ogni coppia di nodi i e j deve spedirsi una domanda d_ij
utilizzando l’unico cammino che collega i e j sull’albero.
Si vuole minimizzare la somma su tutte le coppie di nodi dei costi di spedizione.
!)

model "MST"

    uses "mmxprs", "mmsystem"

    setparam("XPRS_PRESOLVE", 0)
    setparam("XPRS_CUTSTRATEGY", 0)
    setparam("XPRS_VERBOSE", 0)

    ! --------------------------------------------------------------------------------
    ! DATA READING -------------------------------------------------------------------
    ! --------------------------------------------------------------------------------

        declarations
            file_path = "graph_7.dat"
            N: integer                              ! number of nodes
        end-declarations
        initialisations from file_path
            N
        end-initialisations
        declarations
            NODES = 1..N                               ! nodes
            GRAPH: array(NODES,NODES) of integer       ! matrix of edges in the graph (undirected, 0 if no edge, 1 if edge exists)
            COSTS: array(NODES,NODES) of real          ! matrix of costs of the edges
        end-declarations
        initialisations from file_path
            GRAPH
            COSTS
        end-initialisations

    ! --------------------------------------------------------------------------------
    ! DECLARATIONS -------------------------------------------------------------------
    ! --------------------------------------------------------------------------------

        declarations
            x: dynamic array(NODES,NODES) of mpvar      ! selected edges variable (1 if edge is selected, 0 otherwise)
            tree_cost: linctr                           ! cost of the tree
            route_cost: linctr                          ! cost of the routing tree

            iter: integer                               ! iterator counter
            violation: boolean                          ! found violation of a constraint
            violation_counter: integer                            ! counter for the number of violated constraints
            violation_ctrs: dynamic array(range) of linctr    ! violated constraints

            visited: set of integer                    ! set of visited nodes while searching for cycles

            dist: array(NODES,NODES) of mpvar          ! matrix of distances between nodes
            !dist: array(NODES,NODES) of real         ! matrix of distances between nodes (real)

        end-declarations

    ! --------------------------------------------------------------------------------
    ! PROCEDURES & FUNCTIONS ---------------------------------------------------------
    ! --------------------------------------------------------------------------------

        procedure print_matrix_integer(m: array(r: range, range) of integer, upper_only: boolean)
            ! Header
            write("   | ")
            forall (i in r)
                write(strfmt(i, 4), " ")
            writeln
            writeln("-"*(5*getsize(r)+4))

            forall (i in r) do
                write(strfmt(i, 2), " | ")
                forall (j in r) do

                    if ((i>=j or m(i,j)=0) and upper_only) then
                        write(" ·")
                        !write(" ")
                    else
                        write(strfmt(m(i,j), 4))
                    end-if

                    if (j < getsize(r)) then
                        write(" ")
                    else
                        writeln
                    end-if
                end-do
            end-do
            writeln
        end-procedure

        procedure print_matrix_real(m: array(r: range, range) of real, upper_only: boolean)
            ! Header
            write("   | ")
            forall (i in r)
                write(strfmt(i, 4), " ")
            writeln
            writeln("-"*(5*getsize(r)+4))

            forall (i in r) do
                write(strfmt(i, 2), " | ")
                forall (j in r) do

                    if ((i>=j or m(i,j)=0) and upper_only) then
                        write("   ·")
                    else
                        write(strfmt(m(i,j), 4))
                    end-if

                    if (j < getsize(r)) then
                        write(" ")
                    else
                        writeln
                    end-if
                end-do
            end-do
            writeln
        end-procedure

        procedure print_matrix_mpvar(m: array(r:range, range) of mpvar, upper_only: boolean)
            ! Header
            write("   | ")
            forall (i in r)
                write(strfmt(i, 2), " ")
            writeln
            writeln("-"*(3*getsize(r)+4))

            forall (i in r) do
                write(strfmt(i, 2), " | ")
                forall (j in r) do

                    if ((i>=j or abs(getsol(m(i,j)))=0) and upper_only) then
                        write(" ·")
                        !write(" ")
                    else
                        write(strfmt(abs(getsol(m(i,j))), 2))
                    end-if

                    if (j < getsize(r)) then
                        write(" ")
                    else
                        writeln
                    end-if
                end-do
            end-do
            writeln
        end-procedure

        procedure discover_cycle_from(s: integer)
            ! Build the path from the source
            if (s in visited) then
                violation := true
            else
                visited += {s}
                forall (i in NODES | i>s) do
                    if (getsol(x(s,i))>0) then
                        discover_cycle_from(i)
                    end-if
                end-do
            end-if
        end-procedure

        function exists_path(s,d: integer): boolean
            ! Check if there is a path from s to d

            returned := false
            if (s=d or getsol(x(s,d))>0 or getsol(x(d,s))>0) then
                visited += {s,d}
                returned := true
            else
                visited += {s}
                forall (i in (NODES-visited) | getsol(x(s,i))>0 or getsol(x(i,s))>0) do
                    if (exists_path(i,d)) then
                        returned := true
                        visited += {d}
                    else
                        visited -= {i}
                    end-if
                end-do
            end-if
        end-function

        function path_cost(s,d: integer): real
            ! Get the path cost from the source to the destinantion nodes
            if (s = d) then
                returned := 0
            else
                visited := {}
                if (exists_path(s,d)) then
                    returned := sum(n in 1..(getsize(visited)-1)) COSTS(visited(n), visited(n+1))
                end-if
            end-if
        end-function

        procedure print_sol(final: boolean)
            writeln
            if (final) then
                writeln("-"*60, " ", "Final")
            else
                writeln("-"*60, " ", "Iter ", iter)
            end-if
            writeln("SELECTED EDGES: ")
            print_matrix_mpvar(x, true)

            tree_cost_cumulative := 0.0
            forall (i,j in NODES | i<j and GRAPH(i,j)=1) do
                tree_cost_cumulative := tree_cost_cumulative + COSTS(i,j) * getsol(x(i,j))
            end-do

            route_cost_cumulative := 0.0
            forall (i,j in NODES | i<j) do
                visited := {}
                route_cost_cumulative += path_cost(i,j)
            end-do

            writeln("TREE COST:\t", tree_cost_cumulative)
            writeln("ROUTE COST:\t", route_cost_cumulative)
            writeln("Objective: ", getobjval)
            writeln
        end-procedure

    ! --------------------------------------------------------------------------------
    ! MODEL --------------------------------------------------------------------------
    ! --------------------------------------------------------------------------------

        ! Integrity
        forall (i,j in NODES | i<j and GRAPH(i,j)=1) do
            create(x(i,j))
            x(i,j) is_binary
        end-do

        ! Cardinality
        sum (i,j in NODES | i<j and GRAPH(i,j)=1) x(i,j) = N-1

        ! Simmetry assigment for semplification
        forall (i,j in NODES | i<j and GRAPH(i,j)=1) do
            create(x(j,i))
            x(i,j) = x(j,i)
            GRAPH(j,i) := GRAPH(i,j)
            COSTS(j,i) := COSTS(i,j)
        end-do

        !forall (i,j in NODES | i=j)
        !    dist(i,j) = 0

        !forall (i,j in NODES | i<j) do
        !    dist(i,j) = x(i,j)*COSTS(i,j) + (1-x(i,j))*(sum(k,l in NODES-{i,j}) (COSTS(i,k)+COSTS(l,j)+dist(k,l))*x(i,k)*x(l,j))
        !end-do

        ! Objective
        tree_cost := sum(i,j in NODES | i<j and GRAPH(i,j)=1) COSTS(i,j) * x(i,j)
        route_cost := sum(i,j in NODES | i<j) dist(i,j)

        objective := tree_cost

        !route_cost :=   sum(p,q in NODES | p<q) ((sum(j in NODES-{p})     COSTS(p,j) * x(p,j)) +
        !                                         (sum(i in NODES-{p,q})   COSTS(i,q) * x(i,q)) +
        !                                         (sum(i,j in NODES-{p,q})       COSTS(i,j) * x(i,j)))

        iter := 0
        violation_counter := 0
        repeat
            violation := false
            iter := iter + 1

            minimize(XPRS_LIN, objective)
            print_sol(false)

            writeln("distance matrix:")
            !build_dist_matrix
            !print_matrix_real(dist, true)

            print_matrix_mpvar(dist, true)


            ! Search for cycles
            forall (i in NODES) do
                visited := {}

                ! Build the path from the node and set "violation" if a cycle is found
                discover_cycle_from(i)

                if (violation) then
                    violation_counter := violation_counter + 1
                    writeln("Violation detected! This set contains a cycle: ", visited)
                    writeln("Violation counter: ", violation_counter)

                    ! Remove the cycle with new constraint
                    create(violation_ctrs(violation_counter))
                    violation_ctrs(violation_counter) := sum(p,q in visited | p<q) x(p,q) <= getsize(visited)-1

                    ! Restart the search
                    break

                end-if
            end-do

        until (not(violation))

        minimize(objective)
        print_sol(true)

end-model


(!
        1
      / |
    2   |   4
        | /
        3 -- 5

    pc(2,3) =
                c(2,3) * x(2,3) +

                c(2,1) * x(2,1) +
                c(1,3) * x(1,3) +

                c(2,4) * x(2,4) +
                c(4,3) * x(4,3) +

                c(2,5) * x(2,5) +

                c(1,4) * x(1,4) +
                c(1,5) * x(1,5) +
                c(4,5) * x(4,5) +

            =
                c(2,1) * x(2,1) +
                c(2,3) * x(2,3) + 0
                c(2,4) * x(2,4) + 0
                c(2,5) * x(2,5) + 0

                c(1,3) * x(1,3) +
                c(4,3) * x(4,3) +

                c(1,4) * x(1,4) + 0
                c(1,5) * x(1,5) + 0
                c(4,5) * x(4,5) + 0

            =
                sum(j in NODES | j<>2) c(2,j) * x(2,j) +
                sum(i in NODES | i<>2 and i<>3) c(i,3) * x(i,3) +
                sum(i,j in NODES-{2,3} | i<j) c(i,j) * x(i,j)

    pc(1,5) =
                c(1,5) * x(1,5) +

                c(1,2) * x(1,2) +
                c(2,5) * x(2,5) +

                c(1,3) * x(1,3) +
                c(3,5) * x(3,5) +

                c(1,4) * x(1,4) +
                c(4,5) * x(4,5) +

                c(2,3) * x(2,3) +

                c(2,4) * x(2,4) +

                c(3,4) * x(3,4) +


            =
                c(1,2) * x(1,2) +
                c(1,3) * x(1,3) +
                c(1,4) * x(1,4) +
                c(1,5) * x(1,5) +

                c(2,3) * x(2,3) +
                c(2,4) * x(2,4) +
                c(2,5) * x(2,5) +

                c(3,4) * x(3,4) +
                c(3,5) * x(3,5) +

                c(4,5) * x(4,5) +
!)
